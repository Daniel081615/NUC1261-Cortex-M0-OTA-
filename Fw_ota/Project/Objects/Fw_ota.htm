<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\Fw_ota.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\Fw_ota.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6230001: Last Updated: Mon Jun  9 10:37:44 2025
<BR><P>
<H3>Maximum Stack Usage =        376 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; ProcessUartPacket &rArr; CMD_SWITCHCASE &rArr; MarkFirmwareAsActive &rArr; WriteMetadata &rArr; CRC32_Calc &rArr; __aeabi_memcpy
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[5]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">SysTick_Handler</a><BR>
 <LI><a href="#[16]">Default_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">Default_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ACMP01_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[1f]">ADC_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[6]">BOD_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[20]">CLKDIRC_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[16]">Default_Handler</a> from startup_nuc1261.o(.text) referenced 5 times from startup_nuc1261.o(RESET)
 <LI><a href="#[8]">EINT024_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[9]">EINT135_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[a]">GPAB_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[b]">GPCDEF_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[17]">I2C0_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[18]">I2C1_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[1d]">PDMA_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[c]">PWM0_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[d]">PWM1_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[1e]">PWRWU_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[23]">ProcessHardFault</a> from main.o(.text) referenced from startup_nuc1261.o(.text)
 <LI><a href="#[21]">RTC_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[1b]">SC01_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[24]">SH_Return</a> from main.o(.text) referenced from startup_nuc1261.o(.text)
 <LI><a href="#[14]">SPI0_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[15]">SPI1_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[e]">TMR0_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[f]">TMR1_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[10]">TMR2_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[11]">TMR3_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[12]">UART02_IRQHandler</a> from uart_user.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[13]">UART1_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[1a]">USBD_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[19]">USCI_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[7]">WDT_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[22]">__main</a> from __main.o(!!!main) referenced from startup_nuc1261.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[22]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(.text)
</UL>
<P><STRONG><a name="[28]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[2a]"></a>__scatterload_rt2</STRONG> (Thumb, 74 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[6a]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[6b]"></a>__scatterload_loop</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[2b]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[6c]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, __scatter.o(!!handler_null), UNUSED)

<P><STRONG><a name="[6d]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[2f]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[6e]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[6f]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[70]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[71]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[72]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000034))

<P><STRONG><a name="[73]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[74]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[75]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[76]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[77]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[78]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[79]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[7a]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[7b]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[7c]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[7d]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[7e]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))

<P><STRONG><a name="[7f]"></a>__rt_lib_init_relocate_pie_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[80]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000035))

<P><STRONG><a name="[81]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[82]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000027))

<P><STRONG><a name="[83]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[34]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[84]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[85]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[86]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[87]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[88]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[89]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[8a]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[29]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[8b]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[2c]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2e]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[8c]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[30]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; ProcessUartPacket &rArr; CMD_SWITCHCASE &rArr; MarkFirmwareAsActive &rArr; WriteMetadata &rArr; CRC32_Calc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8d]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[69]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[33]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[8e]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[35]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[62]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[8f]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ACMP01_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CLKDIRC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>EINT024_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>EINT135_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>GPAB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>GPCDEF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>PDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>PWRWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SC01_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TMR0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TMR1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TMR2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TMR3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>USBD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>USCI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[26]"></a>SH_DoCommand</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_nuc1261.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[27]"></a>__PC</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, startup_nuc1261.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[23]"></a>ProcessHardFault</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(.text)
</UL>
<P><STRONG><a name="[24]"></a>SH_Return</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(.text)
</UL>
<P><STRONG><a name="[38]"></a>SYS_Init</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYS_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[31]"></a>main</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = main &rArr; ProcessUartPacket &rArr; CMD_SWITCHCASE &rArr; MarkFirmwareAsActive &rArr; WriteMetadata &rArr; CRC32_Calc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlinkLED
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessUartPacket
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceResetByWDT
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkFirmwareAsActive
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRITE_FW_STATUS_FLAG
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlinkStatusLED
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmwareSelfCheck
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitWDT
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeedWDT
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[42]"></a>BlinkLED</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BlinkLED &rArr; CLK_SysTickDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SysTickDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[44]"></a>CRC32_Calc</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, crc_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CRC32_Calc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_GetChecksum
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyMetadataCRC
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyFirmware
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMetadata
</UL>

<P><STRONG><a name="[49]"></a>FMC_Proc</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, fmc_user.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FMC_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFWstatus
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanMetadataPair
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMetadata
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateConfig
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRITE_FW_STATUS_FLAG
</UL>

<P><STRONG><a name="[48]"></a>UpdateConfig</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, fmc_user.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Proc
</UL>

<P><STRONG><a name="[4a]"></a>WriteMetadata</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, fw_metadata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = WriteMetadata &rArr; CRC32_Calc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Close
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Open
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Proc
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC32_Calc
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkFirmwareAsActive
</UL>

<P><STRONG><a name="[4d]"></a>VerifyFirmware</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, fw_metadata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = VerifyFirmware &rArr; CRC32_Calc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC32_Calc
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmwareSelfCheck
</UL>

<P><STRONG><a name="[4e]"></a>VerifyMetadataCRC</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, fw_metadata.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC32_Calc
</UL>

<P><STRONG><a name="[3e]"></a>MarkFirmwareAsActive</STRONG> (Thumb, 340 bytes, Stack size 128 bytes, fw_ota_mark_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = MarkFirmwareAsActive &rArr; WriteMetadata &rArr; CRC32_Calc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanMetadataPair
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMetadata
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_SWITCHCASE
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4f]"></a>ScanMetadataPair</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, fw_ota_mark_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ScanMetadataPair &rArr; FMC_Proc
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Open
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessUartPacket
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkFirmwareAsActive
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmwareSelfCheck
</UL>

<P><STRONG><a name="[3b]"></a>FirmwareSelfCheck</STRONG> (Thumb, 176 bytes, Stack size 120 bytes, fw_selfcheck.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = FirmwareSelfCheck &rArr; VerifyFirmware &rArr; CRC32_Calc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanMetadataPair
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyFirmware
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlinkStatusLED
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3c]"></a>BlinkStatusLED</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, fw_selfcheck.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = BlinkStatusLED &rArr; CLK_SysTickDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SysTickDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirmwareSelfCheck
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[41]"></a>ProcessUartPacket</STRONG> (Thumb, 76 bytes, Stack size 96 bytes, fw_selfcheck.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = ProcessUartPacket &rArr; CMD_SWITCHCASE &rArr; MarkFirmwareAsActive &rArr; WriteMetadata &rArr; CRC32_Calc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_SWITCHCASE
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanMetadataPair
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[51]"></a>CMD_SWITCHCASE</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, fw_selfcheck.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = CMD_SWITCHCASE &rArr; MarkFirmwareAsActive &rArr; WriteMetadata &rArr; CRC32_Calc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JumpToFirmware
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_respond
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MarkFirmwareAsActive
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRITE_FW_STATUS_FLAG
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessUartPacket
</UL>

<P><STRONG><a name="[53]"></a>JumpToFirmware</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, fw_selfcheck.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = JumpToFirmware &rArr; WDT_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Open
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SetVectorPageAddr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_SWITCHCASE
</UL>

<P><STRONG><a name="[58]"></a>WriteFWstatus</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, fw_status.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WriteFWstatus &rArr; FMC_Proc
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Close
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Open
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRITE_FW_STATUS_FLAG
</UL>

<P><STRONG><a name="[3d]"></a>WRITE_FW_STATUS_FLAG</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, fw_status.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = WRITE_FW_STATUS_FLAG &rArr; WriteFWstatus &rArr; FMC_Proc
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFWstatus
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Open
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_SWITCHCASE
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[52]"></a>Mcu_respond</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, uart_comm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Mcu_respond &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutString
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_SWITCHCASE
</UL>

<P><STRONG><a name="[12]"></a>UART02_IRQHandler</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, uart_user.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART02_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>PutString</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, uart_user.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PutString
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_respond
</UL>

<P><STRONG><a name="[39]"></a>UART_Init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, uart_user.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_Init &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3a]"></a>InitWDT</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, wdt_user.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3f]"></a>ForceResetByWDT</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wdt_user.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ForceResetByWDT &rArr; WDT_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[45]"></a>CRC_Open</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, crc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CRC_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC32_Calc
</UL>

<P><STRONG><a name="[47]"></a>CRC_GetChecksum</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, crc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CRC_GetChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC32_Calc
</UL>

<P><STRONG><a name="[90]"></a>FMC_SetBootSource</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[4c]"></a>FMC_Close</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fmc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFWstatus
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMetadata
</UL>

<P><STRONG><a name="[91]"></a>FMC_DisableAPUpdate</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[92]"></a>FMC_DisableConfigUpdate</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[93]"></a>FMC_DisableLDUpdate</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[94]"></a>FMC_DisableSPUpdate</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[95]"></a>FMC_EnableAPUpdate</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[96]"></a>FMC_EnableConfigUpdate</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>FMC_EnableLDUpdate</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>FMC_EnableSPUpdate</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[99]"></a>FMC_GetBootSource</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[4b]"></a>FMC_Open</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fmc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFWstatus
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JumpToFirmware
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_respond
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanMetadataPair
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMetadata
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WRITE_FW_STATUS_FLAG
</UL>

<P><STRONG><a name="[9a]"></a>FMC_ReadDataFlashBaseAddr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>FMC_ReadConfig</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, fmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Read
</UL>

<P><STRONG><a name="[60]"></a>FMC_WriteConfig</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, fmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Write
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Read
</UL>

<P><STRONG><a name="[9b]"></a>FMC_EnableFreqOptimizeMode</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>FMC_DisableFreqOptimizeMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[54]"></a>WDT_Open</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, wdt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WDT_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JumpToFirmware
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceResetByWDT
</UL>

<P><STRONG><a name="[46]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_respond
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC32_Calc
</UL>

<P><STRONG><a name="[9d]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>__aeabi_memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, aeabi_memset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcu_respond
</UL>

<P><STRONG><a name="[9e]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[63]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[65]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[a1]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[a2]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[a3]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[2d]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[32]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[a4]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[a5]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[36]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[a6]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[a7]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[a8]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[16]"></a>Default_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>SYS_UnlockReg</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SYS_UnlockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[40]"></a>FeedWDT</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[43]"></a>CLK_SysTickDelay</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CLK_SysTickDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlinkLED
</UL>

<P><STRONG><a name="[50]"></a>CLK_SysTickDelay</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, fw_selfcheck.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CLK_SysTickDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlinkStatusLED
</UL>

<P><STRONG><a name="[55]"></a>SYS_UnlockReg</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, fw_selfcheck.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SYS_UnlockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JumpToFirmware
</UL>

<P><STRONG><a name="[56]"></a>FMC_SetVectorPageAddr</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, fw_selfcheck.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FMC_SetVectorPageAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JumpToFirmware
</UL>

<P><STRONG><a name="[57]"></a>__NVIC_SystemReset</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fw_selfcheck.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JumpToFirmware
</UL>

<P><STRONG><a name="[5b]"></a>__NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, uart_user.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[5c]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, uart_user.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[5d]"></a>SYS_UnlockReg</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, wdt_user.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SYS_UnlockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceResetByWDT
</UL>

<P><STRONG><a name="[5f]"></a>FMC_Read</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, fmc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_WriteConfig
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_ReadConfig
</UL>

<P><STRONG><a name="[61]"></a>FMC_Write</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, fmc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_WriteConfig
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[68]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
