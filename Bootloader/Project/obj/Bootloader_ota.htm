<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\Bootloader_ota.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\Bootloader_ota.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6230001: Last Updated: Tue Jun 17 13:56:22 2025
<BR><P>
<H3>Maximum Stack Usage =        408 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; ParseCmd &rArr; VerifyFirmware &rArr; Calculate_CRC32 &rArr; Common_CRC32_Calc &rArr; CRC_Open
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[5]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">SysTick_Handler</a><BR>
 <LI><a href="#[16]">Default_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">Default_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ACMP01_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[1f]">ADC_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[6]">BOD_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[20]">CLKDIRC_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[16]">Default_Handler</a> from startup_nuc1261.o(.text) referenced 5 times from startup_nuc1261.o(RESET)
 <LI><a href="#[8]">EINT024_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[9]">EINT135_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[a]">GPAB_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[b]">GPCDEF_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[17]">I2C0_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[18]">I2C1_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[1d]">PDMA_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[c]">PWM0_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[d]">PWM1_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[1e]">PWRWU_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[24]">ProcessHardFault</a> from main.o(.text) referenced from startup_nuc1261.o(.text)
 <LI><a href="#[21]">RTC_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[1b]">SC01_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[25]">SH_Return</a> from main.o(.text) referenced from startup_nuc1261.o(.text)
 <LI><a href="#[14]">SPI0_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[15]">SPI1_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[e]">TMR0_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[f]">TMR1_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[10]">TMR2_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[11]">TMR3_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[12]">UART02_IRQHandler</a> from uart_transfer.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[13]">UART1_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[1a]">USBD_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[19]">USCI_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[7]">WDT_IRQHandler</a> from startup_nuc1261.o(.text) referenced from startup_nuc1261.o(RESET)
 <LI><a href="#[23]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_nuc1261.o(.text)
 <LI><a href="#[22]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[23]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(.text)
</UL>
<P><STRONG><a name="[5a]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[28]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[59]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[5b]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[5c]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[5d]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[5e]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[5f]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ACMP01_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CLKDIRC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>EINT024_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>EINT135_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>GPAB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>GPCDEF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>PDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>PWRWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SC01_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TMR0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TMR1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TMR2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TMR3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>USBD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>USCI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>SH_DoCommand</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_nuc1261.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[27]"></a>__PC</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, startup_nuc1261.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[24]"></a>ProcessHardFault</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(.text)
</UL>
<P><STRONG><a name="[25]"></a>SH_Return</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(.text)
</UL>
<P><STRONG><a name="[2b]"></a>SYS_Init</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SYS_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[22]"></a>main</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = main &rArr; ParseCmd &rArr; VerifyFirmware &rArr; Calculate_CRC32 &rArr; Common_CRC32_Calc &rArr; CRC_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutString
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCmd
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boot_Decision
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDataFlashInfo
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetApromSize
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[30]"></a>ParseCmd</STRONG> (Thumb, 1552 bytes, Stack size 288 bytes, isp_user.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = ParseCmd &rArr; VerifyFirmware &rArr; Calculate_CRC32 &rArr; Common_CRC32_Calc &rArr; CRC_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JumpToFirmware
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteStatus
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyFirmware
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMetadata
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isUpdatable
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateConfig
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Open
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Proc
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SetVectorPageAddr
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[39]"></a>WriteMetadata</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, fw_metadata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = WriteMetadata &rArr; CRC32_Calc &rArr; Common_CRC32_Calc &rArr; CRC_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Close
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC32_Calc
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Open
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCmd
</UL>

<P><STRONG><a name="[3c]"></a>WriteStatus</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, fw_metadata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = WriteStatus &rArr; FMC_Proc
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Close
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Open
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCmd
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boot_Decision
</UL>

<P><STRONG><a name="[38]"></a>isUpdatable</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, fw_metadata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = isUpdatable
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCmd
</UL>

<P><STRONG><a name="[33]"></a>FMC_Proc</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, fmc_user.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FMC_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteStatus
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMetadata
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateConfig
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCmd
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boot_Decision
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDataFlashInfo
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetApromSize
</UL>

<P><STRONG><a name="[37]"></a>UpdateConfig</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, fmc_user.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UpdateConfig &rArr; FMC_Proc
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCmd
</UL>

<P><STRONG><a name="[41]"></a>is_valid_active</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, select_fw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = is_valid_active
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boot_Decision
</UL>

<P><STRONG><a name="[2f]"></a>Boot_Decision</STRONG> (Thumb, 248 bytes, Stack size 104 bytes, select_fw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = Boot_Decision &rArr; JumpToFirmware &rArr; BlinkStatusLED &rArr; CLK_SysTickDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_valid_active
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsValidAddress
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Erase
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JumpToFirmware
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteStatus
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Open
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3d]"></a>JumpToFirmware</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, select_fw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = JumpToFirmware &rArr; BlinkStatusLED &rArr; CLK_SysTickDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Open
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlinkStatusLED
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SetVectorPageAddr
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCmd
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boot_Decision
</UL>

<P><STRONG><a name="[48]"></a>InitBootloaderWDT</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, select_fw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearWDTResetFlags
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Open
</UL>

<P><STRONG><a name="[49]"></a>ClearWDTResetFlags</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, select_fw.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBootloaderWDT
</UL>

<P><STRONG><a name="[60]"></a>FeedWDT</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, select_fw.o(.text), UNUSED)

<P><STRONG><a name="[43]"></a>BlinkStatusLED</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, select_fw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = BlinkStatusLED &rArr; CLK_SysTickDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SysTickDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JumpToFirmware
</UL>

<P><STRONG><a name="[3b]"></a>VerifyFirmware</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, select_fw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = VerifyFirmware &rArr; Calculate_CRC32 &rArr; Common_CRC32_Calc &rArr; CRC_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_CRC32
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCmd
</UL>

<P><STRONG><a name="[4c]"></a>VerifyMetadataCRC</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, select_fw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_CRC32
</UL>

<P><STRONG><a name="[12]"></a>UART02_IRQHandler</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, uart_transfer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART02_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>PutString</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, uart_transfer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PutString
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2c]"></a>UART_Init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, uart_transfer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_Init &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2d]"></a>GetApromSize</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, targetdev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GetApromSize &rArr; FMC_Proc
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2e]"></a>GetDataFlashInfo</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, targetdev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GetDataFlashInfo &rArr; FMC_Proc
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4f]"></a>Common_CRC32_Calc</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, crc_user.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Common_CRC32_Calc &rArr; CRC_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_GetChecksum
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Calculate_CRC32
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC32_Calc
</UL>

<P><STRONG><a name="[4b]"></a>Calculate_CRC32</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, crc_user.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Calculate_CRC32 &rArr; Common_CRC32_Calc &rArr; CRC_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Common_CRC32_Calc
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyMetadataCRC
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyFirmware
</UL>

<P><STRONG><a name="[3e]"></a>CRC32_Calc</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, crc_user.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CRC32_Calc &rArr; Common_CRC32_Calc &rArr; CRC_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Common_CRC32_Calc
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMetadata
</UL>

<P><STRONG><a name="[50]"></a>CRC_Open</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, crc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CRC_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Common_CRC32_Calc
</UL>

<P><STRONG><a name="[52]"></a>CRC_GetChecksum</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, crc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CRC_GetChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Common_CRC32_Calc
</UL>

<P><STRONG><a name="[61]"></a>FMC_SetBootSource</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[3f]"></a>FMC_Close</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fmc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteStatus
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMetadata
</UL>

<P><STRONG><a name="[62]"></a>FMC_DisableAPUpdate</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>FMC_DisableConfigUpdate</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>FMC_DisableLDUpdate</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[65]"></a>FMC_DisableSPUpdate</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>FMC_EnableAPUpdate</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>FMC_EnableConfigUpdate</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>FMC_EnableLDUpdate</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>FMC_EnableSPUpdate</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>FMC_GetBootSource</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[34]"></a>FMC_Open</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fmc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JumpToFirmware
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteStatus
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteMetadata
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCmd
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boot_Decision
</UL>

<P><STRONG><a name="[6b]"></a>FMC_ReadDataFlashBaseAddr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[53]"></a>FMC_ReadConfig</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, fmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Read
</UL>

<P><STRONG><a name="[55]"></a>FMC_WriteConfig</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, fmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Write
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Read
</UL>

<P><STRONG><a name="[6c]"></a>FMC_EnableFreqOptimizeMode</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>FMC_DisableFreqOptimizeMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fmc.o(.text), UNUSED)

<P><STRONG><a name="[44]"></a>WDT_Open</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, wdt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WDT_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitBootloaderWDT
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JumpToFirmware
</UL>

<P><STRONG><a name="[51]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Common_CRC32_Calc
</UL>

<P><STRONG><a name="[6e]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[57]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[70]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[3a]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCmd
</UL>

<P><STRONG><a name="[72]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[58]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[29]"></a>__scatterload</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[74]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[76]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[77]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[16]"></a>Default_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc1261.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc1261.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>SYS_UnlockReg</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SYS_UnlockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[32]"></a>Checksum</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, isp_user.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCmd
</UL>

<P><STRONG><a name="[35]"></a>FMC_SetVectorPageAddr</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, isp_user.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FMC_SetVectorPageAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCmd
</UL>

<P><STRONG><a name="[36]"></a>__NVIC_SystemReset</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, isp_user.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCmd
</UL>

<P><STRONG><a name="[40]"></a>FMC_Erase</STRONG> (Thumb, 136 bytes, Stack size 12 bytes, select_fw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FMC_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boot_Decision
</UL>

<P><STRONG><a name="[42]"></a>IsValidAddress</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, select_fw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IsValidAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boot_Decision
</UL>

<P><STRONG><a name="[45]"></a>SYS_UnlockReg</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, select_fw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SYS_UnlockReg
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JumpToFirmware
</UL>

<P><STRONG><a name="[46]"></a>FMC_SetVectorPageAddr</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, select_fw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FMC_SetVectorPageAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JumpToFirmware
</UL>

<P><STRONG><a name="[47]"></a>__NVIC_SystemReset</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, select_fw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JumpToFirmware
</UL>

<P><STRONG><a name="[4a]"></a>CLK_SysTickDelay</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, select_fw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CLK_SysTickDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlinkStatusLED
</UL>

<P><STRONG><a name="[4d]"></a>__NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, uart_transfer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[4e]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, uart_transfer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[54]"></a>FMC_Read</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, fmc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_WriteConfig
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_ReadConfig
</UL>

<P><STRONG><a name="[56]"></a>FMC_Write</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, fmc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_WriteConfig
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
